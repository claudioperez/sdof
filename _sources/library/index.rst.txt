Library
=======

The ``sdof`` library is primarily implemented in standard C, and
interfaces are provided for both Python and Javascript.

All functions accept the following parameters for the :math:`\alpha` integrator:

.. raw:: html

   <table>

.. raw:: html

   <tbody>

.. raw:: html

   <tr class="odd">

.. raw:: html

   <td>

.. raw:: html

   <p>

alphaM

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <p>

:math:`\alpha_M` factor

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr class="even">

.. raw:: html

   <td>

.. raw:: html

   <p>

alphaF

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <p>

:math:`\alpha_F` factor

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr class="odd">

.. raw:: html

   <td>

.. raw:: html

   <p>

gamma

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <p>

:math:`\gamma` factor

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr class="even">

.. raw:: html

   <td>

.. raw:: html

   <p>

beta

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <p>

:math:`\beta` factor

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </tbody>

.. raw:: html

   </table>



#. :math:`\alpha_F` and :math:`\alpha_M` are defined differently that in
   the paper, we use :math:`\alpha_F = (1-\alpha_f)` and
   :math:`\alpha_M=(1-\alpha_m)` where :math:`\alpha_f` and
   :math:`\alpha_m` are those used in the paper.


#. Like Newmark and other implicit schemes, the unconditional stability of
   this method applies to linear problems. There are no results showing
   stability of this method over the wide range of nonlinear problems that
   potentially exist. Experience indicates that the time step for implicit
   schemes in nonlinear situations can be much greater than those for
   explicit schemes.


#. :math:`\alpha_M = 1.0, \alpha_F = 1.0` produces the Newmark Method.


#. :math:`\alpha_M = 1.0` corresponds to the HHT method.


#. The method is second-order accurate provided :math:`\gamma = \dfrac{1}{2} + \alpha_M - \alpha_F`


#. The method is unconditionally stable provided :math:`\alpha_M \ge \alpha_F \ge \dfrac{1}{2}, \quad \beta \ge \dfrac{1}{4} +\dfrac{1}{2}(\alpha_M - \alpha_F)`


#. :math:`\gamma` and :math:`\beta` are optional. The default values ensure
   the method is unconditionally stable, second order accurate and high
   frequency dissipation is maximized.

The defaults are:

- :math:`\gamma = \dfrac{1}{2} + \alpha_M - \alpha_F`

- :math:`\beta = \dfrac{1}{4}(1 + \alpha_M - \alpha_F)^2`


.. toctree::

  sdof.rst
  javascript.rst

